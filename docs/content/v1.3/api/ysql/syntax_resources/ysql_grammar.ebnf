(* 'ABORT' *)
abort ::= 'ABORT' [ 'TRANSACTION' | 'WORK' ] ;

(* 'ALTER' 'DATABASE' *)
alter_database ::=
  'ALTER' 'DATABASE' name ( [ [ 'WITH' ]  alter_database_option { alter_database_option } ]
                        | 'RENAME' 'TO' name
                        | 'OWNER' 'TO' ( new_owner | 'CURRENT_USER' | 'SESSION_USER' )
                        | 'SET' 'TABLESPACE' new_tablespace
                        | 'SET' configuration_parameter ( 'TO' | '=' ) ( value | 'DEFAULT' )
                        | 'SET' configuration_parameter 'FROM' 'CURRENT'
                        | 'RESET' configuration_parameter
                        | 'RESET' 'ALL' ) ;

alter_database_option ::=
  ( 'ALLOW_CONNECTIONS' allowconn | 'CONNECTION' 'LIMIT' connlimit | 'IS_TEMPLATE' istemplate ) ;

(* 'ALTER' 'DOMAIN' *)

alter_domain_default ::= 'ALTER' 'DOMAIN' name
    ( 'SET' 'DEFAULT' expression | 'DROP' 'DEFAULT' ) ;

alter_domain_rename ::= 'ALTER' 'DOMAIN' name
    'RENAME' 'TO' name ;

(* 'ALTER' 'TABLE' *)
alter_table ::= 'ALTER' 'TABLE' [ 'ONLY' ] name [ '*' ]
                        alter_table_action { ',' alter_table_action } ;

alter_table_action ::=
  ( 'ADD' [ 'COLUMN' ] column_name data_type
    | 'RENAME' 'TO' table_name
    | 'DROP' [ 'COLUMN' ] column_name [ 'RESTRICT' | 'CASCADE' ]
    | 'ADD' alter_table_constraint
    | 'DROP' 'CONSTRAINT' constraint_name [ 'RESTRICT' | 'CASCADE' ]
    | 'RENAME' [ 'COLUMN' ] column_name 'TO' column_name ) ;

alter_table_constraint ::= [ 'CONSTRAINT' constraint_name ] ( 
                       'CHECK' '(' expression ')' | 
                       'UNIQUE' '(' column_names ')' index_parameters |
                       'FOREIGN' 'KEY' '(' column_names ')' references_clause ) ;

(* 'BEGIN' *)
begin = 'BEGIN' [ 'TRANSACTION' | 'WORK' ] { transaction_mode } ;

(* 'COMMIT' 'TRANSACTION' *)
commit ::= 'COMMIT' [ 'TRANSACTION' | 'WORK' ] ;

(* 'COPY' *)
copy_from ::= 'COPY' table_name [ '(' column_name { ',' column_name } ')' ] \
              'FROM' ( 'filename' | 'PROGRAM' 'command' | 'STDIN' )
              [ [ 'WITH' ] '(' option { ',' option } ')' ] ;

copy_to ::= 'COPY' ( table_name [ '(' column_names ')' ] | '(' query ')' ) \
            'TO' ( 'filename' | 'PROGRAM' 'command' | 'STDOUT' )
            [ [ 'WITH' ] '(' option { ',' option } ')' ] ;

copy_option ::=
  ( 'FORMAT' format_name
    | 'OIDS' [ boolean ]
    | 'FREEZE' [ boolean ]
    | 'DELIMITER' 'delimiter_character'
    | 'NULL' 'null_string'
    | 'HEADER' [ boolean ]
    | 'QUOTE' 'quote_character'
    | 'ESCAPE' 'escape_character'
    | 'FORCE_QUOTE' ( '(' column_names ')' | '*' )
    | 'FORCE_NOT_NULL' '(' column_names ')'
    | 'FORCE_NULL' '(' column_names ')'
    | 'ENCODING' 'encoding_name' ) ;

(* 'CREATE' 'DATABASE' *)

create_database ::= 'CREATE' 'DATABASE' name [ create_database_options ] ;

create_database_options ::=  [ 'WITH' ] [ 'OWNER' [ '=' ] user_name ]  \
                             [ 'TEMPLATE' [ '=' ] template ]  \
                             [ 'ENCODING' [ '=' ] encoding ]  \
                             [ 'LC_COLLATE' [ '=' ] lc_collate ]  \
                             [ 'LC_CTYPE' [ '=' ] lc_ctype ]  \
                             [ 'TABLESPACE' [ '=' ] tablespace_name ]  \
                             [ 'ALLOW_CONNECTIONS' [ '=' ] allowconn ]  \
                             [ 'CONNECTION' 'LIMIT' [ '=' ] connlimit ]  \
                             [ 'IS_TEMPLATE' [ '=' ] istemplate ] ;

create_domain ::= 'CREATE' 'DOMAIN' name [ 'AS' ] data_type
    [ 'DEFAULT' expression ]
    [ { domain_constraint } ] ;

domain_constraint ::= [ 'CONSTRAINT' constraint_name ]
    ( 'NOT' 'NULL' | 'NULL' | 'CHECK' '(' expression ')' ) ;

(* 'CREATE' 'INDEX' *)
create_index ::= 'CREATE' [ 'UNIQUE' ] 'INDEX' [ [ 'IF' 'NOT' 'EXISTS' ] name ] \
                          'ON' [ 'ONLY' ] table_name '(' index_elem { ',' index_elem } ')' \
                          [ 'INCLUDE' '(' column_name { ',' column_name } ')' ] \
                          [ 'WHERE' predicate ] ;

index_elem ::= ( column_name | '(' expression ')' ) [ opclass ] [ 'ASC' | 'DESC' ] ;

(* 'CREATE' 'SCHEMA' *)
create_schema ::= 'CREATE' 'SCHEMA' [ 'IF' 'NOT' 'EXISTS' ] schema_name [ schema_element { schema_element } ] ;

(* 'CREATE' 'SEQUENCE' *)
create_sequence ::= 'CREATE' 'SEQUENCE' [ 'IF' 'NOT' 'EXISTS' ] sequence_name  sequence_options ;

sequence_name ::= '<Text Literal>' ;

sequence_options ::= [ 'INCREMENT' [ 'BY' ] increment ]
                     [ 'MINVALUE' minvalue | 'NO' 'MINVALUE' ]
                     [ 'MAXVALUE' maxvalue | 'NO' 'MAXVALUE' ]
                     [ 'START' [ 'WITH' ] start ]
                     [ 'CACHE' cache ] ;

increment ::= '<Integer Literal>' ;
minvalue ::= '<Integer Literal>' ;
maxvalue ::= '<Integer Literal>' ;
start ::= '<Integer Literal>' ;
cache ::= '<Integer Literal>' ;

(* 'CREATE' 'TABLE' *)
create_table ::= 'CREATE' 'TABLE' [ 'IF' 'NOT' 'EXISTS' ] table_name
                 '(' [ table_elem { ',' table_elem } ] ')'
                 [ 'WITH' '(' storage_parameters ')' | 'WITHOUT' 'OIDS' ] ;

table_elem ::= ( column_name data_type [ column_constraint { column_constraint } ] ) | table_constraint ;

column_constraint ::= [ 'CONSTRAINT' constraint_name ]
                      (  'NOT' 'NULL'
                         | 'NULL'
                         | 'CHECK' '(' expression ')'
                         | 'DEFAULT' expression
                         | 'UNIQUE' index_parameters
                         | 'PRIMARY' 'KEY'
                         | references_clause ) ;

table_constraint ::= [ 'CONSTRAINT' constraint_name ]
                     ( 'CHECK' '(' expression ')'
                       | 'UNIQUE' '(' column_names ')' index_parameters
                       | 'PRIMARY' 'KEY' '(' column_names ')' 
                       | 'FOREIGN' 'KEY' '(' column_names ')' references_clause ) ;

references_clause ::= 'REFERENCES' table_name [ ( column_name { ',' column_name } ) ] 
                      [ 'MATCH' 'FULL' | 'MATCH' 'PARTIAL' | 'MATCH' 'SIMPLE' ] \
                      [ 'ON' 'DELETE' key_action ] [ 'ON' 'UPDATE' key_action ] ;

key_action ::= 'NO' 'ACTION' | 'RESTRICT' | 'CASCADE' | 'SET' 'NULL' | 'SET' 'DEFAULT' ;

storage_parameters ::= storage_parameter { ',' storage_parameter } ;

storage_parameter ::= param_name [ '=' param_value] ;

index_parameters ::= [ INCLUDE '(' column_names ')' ]
                     [ WITH '(' storage_parameters ')' ] ;

(* 'CREATE' 'TABLE' 'AS' *)
create_table_as ::= 'CREATE' 'TABLE' [ 'IF' 'NOT' 'EXISTS' ] \
                           table_name [ '(' column_name { ',' column_name } ')' ] \
                           'AS' query [ 'WITH' [ 'NO' ] 'DATA' ] ;

(* 'CREATE' 'TYPE' *)
create_composite_type ::= 'CREATE' 'TYPE' type_name 'AS'
                          '(' [ composite_type_elem { ',' composite_type_elem } ] ')' ;

create_enum_type ::= 'CREATE' 'TYPE' type_name 'AS' 'ENUM'
                     '(' [ label { ',' label } ] ')' ;

create_range_type ::= 'CREATE' 'TYPE' type_name 'AS' 'RANGE'
                      '(' 'SUBTYPE' '=' subtype { ',' range_type_option } ')' ;

create_base_type ::= 'CREATE' 'TYPE' type_name
                     '(' 'INPUT' '=' input_function ',' 'OUTPUT' '=' output_function
                     { ',' base_type_option } ')' ;

create_shell_type ::= 'CREATE' 'TYPE' type_name ;

composite_type_elem ::= attribute_name data_type [ 'COLLATE' collation ] ;

range_type_option ::= 'SUBTYPE_OPCLASS' '=' subtype_operator_class
                      | 'COLLATION' '=' collation
                      | 'CANONICAL' '=' canonical_function
                      | 'SUBTYPE_DIFF' '=' subtype_diff_function ;

base_type_option ::= 'RECEIVE' '=' receive_function
                     | 'SEND' '=' send_function
                     | 'TYPMOD_IN' '=' type_modifier_input_function
                     | 'TYPMOD_OUT' '=' type_modifier_output_function
                     | 'INTERNALLENGTH' '=' ( internallength | 'VARIABLE' )
                     | 'PASSEDBYVALUE'
                     | 'ALIGNMENT' '=' alignment
                     | 'STORAGE' '=' storage
                     | 'LIKE' '=' like_type
                     | 'CATEGORY' '=' category
                     | 'PREFERRED' '=' preferred
                     | 'DEFAULT' '=' default
                     | 'ELEMENT' '=' element
                     | 'DELIMITER' '=' delimiter
                     | 'COLLATABLE' '=' collatable ;

(* 'CREATE' 'USER' *)
create_user ::= 'CREATE' 'USER' name ;

(* 'CREATE' 'VIEW' *)
create_view ::= 'CREATE' [ 'OR' 'REPLACE' ] 'VIEW' qualified_name [ '(' column_list ')' ] 'AS' select ;

(* 'DEALLOCATE' *)
deallocate ::= 'DEALLOCATE' [ 'PREPARE' ] ( name | 'ALL' ) ;

(* 'DELETE' *)
delete ::= [ 'WITH' [ 'RECURSIVE' ] with_query { ',' with_query } ] \
       'DELETE' 'FROM' [ 'ONLY' ] table_name [ '*' ] [ [ 'AS' ] alias ] \
       [ 'WHERE' condition | 'WHERE' 'CURRENT' 'OF' cursor_name ] \
       [ returning_clause ] ;

returning_clause ::= 'RETURNING' ( '*' | ( output_expression [ [ 'AS' ] output_name ] )
                                         { ',' ( output_expression [ [ 'AS' ] output_name ] ) } ) ;

returning_expression ::= output_expression [ [ 'AS' ] output_name ] ;

(* 'DROP' 'DATABASE' *)
drop_database ::= 'DROP' 'DATABASE' [ 'IF' 'EXISTS' ] database_name ;

(* 'DROP' 'TABLE' *)
drop_table ::= 'DROP' 'TABLE' [ 'IF' 'EXISTS' ] table_name ;

(* 'DROP' 'TYPE' *)
drop_type ::= 'DROP' 'TYPE' [ 'IF' 'EXISTS' ] type_name { ',' type_name }
              [ 'CASCADE' | 'RESTRICT' ] ;

(* 'DROP' 'SEQUENCE' *)
drop_sequence ::= 'DROP' 'SEQUENCE' [ 'IF' 'EXISTS' ] sequence_name [ 'CASCADE' | 'RESTRICT' ] ;

(* 'DROP' 'DOMAIN' *)
drop_domain ::= 'DROP' 'DOMAIN' [ 'IF' 'EXISTS' ] name { ',' name }  [ 'CASCADE' | 'RESTRICT' ] ;

(* 'END' 'TRANSACTION' *)
end ::= 'END' [ 'TRANSACTION' | 'WORK' ] ;

(* 'EXECUTE' *)
execute_statement ::= 'EXECUTE' name [ '(' expression { ',' expression } ')' ] ;

(* 'EXPLAIN' *)
explain := 'EXPLAIN' [ ( [ 'ANALYZE' ] [ 'VERBOSE' ] ) | '(' option { ',' option } ')' ] statement ;

option ::= 'ANALYZE' [ boolean ]
           | 'VERBOSE' [ boolean ]
           | 'COSTS' [ boolean ]
           | 'BUFFERS' [ boolean ]
           | 'TIMING' [ boolean ]
           | 'SUMMARY' [ boolean ]
           | 'FORMAT' ( 'TEXT' | 'XML' | 'JSON' | 'YAML' ) ;

(* 'GRANT' *)
grant ::= 'GRANT' privileges 'ON' privilege_target 'TO' name { ',' name } [ 'WITH' 'GRANT' 'OPTION' ] ;

(* 'INSERT' *)

insert ::= [ 'WITH' [ 'RECURSIVE' ] with_query { ',' with_query } ] \
           'INSERT' 'INTO' table_name [ 'AS' alias ] [ '(' column_names ')' ] \
               ( ( 'DEFAULT' 'VALUES' )
               | 'VALUES' '(' column_values ')' { ',' '(' column_values ')' }
               | subquery ) \
               [ 'ON' 'CONFLICT' [ conflict_target ] conflict_action ] \
               [ returning_clause ] ;

column_values ::= ( expression | 'DEFAULT' ) { ',' ( expression | 'DEFAULT' ) } ;


conflict_target ::= '(' ( column_name | expression ) { ',' ( column_name | expression ) } ')'  [ 'WHERE' condition ] | 'ON' 'CONSTRAINT' constraint_name ;

conflict_action ::= 'DO' 'NOTHING' | 'DO' 'UPDATE' 'SET' update_item { ',' update_item } [ 'WHERE' condition ] ;


(* 'LOCK' *)
lock_table ::= 'LOCK' [ 'TABLE' ]
                      ( ( [ 'ONLY' ] name [ '*' ] ) { ',' ( [ 'ONLY' ] name [ '*' ] ) } )
                      [ 'IN' lockmode 'MODE' ] [ 'NOWAIT' ] ;

lockmode ::= ( 'ACCESS' 'SHARE'
               | 'ROW' 'SHARE'
               | 'ROW' 'EXCLUSIVE'
               | 'SHARE' 'UPDATE' 'EXCLUSIVE'
               | 'SHARE'
               | 'SHARE' 'ROW' 'EXCLUSIVE'
               | 'EXCLUSIVE'
               | 'ACCESS' 'EXCLUSIVE' ) ;

(* 'PREPARE' *)
prepare_statement ::= 'PREPARE' name [ '(' data_type { ',' data_type } ')' ] 'AS' statement ;

(* 'RESET' *)
reset_stmt := 'RESET' ( name | 'ALL' ) ;

(* 'REVOKE' *)
revoke ::= 'REVOKE' privileges 'ON' privilege_target 'FROM' name { ',' name } [ 'CASCADE' | 'RESTRICT' ] ;

(* 'ROLLBACK' *)
rollback ::= 'ROLLBACK' [ 'TRANSACTION' | 'WORK' ] ;

(* 'SELECT' *)
select ::= [ 'WITH' [ 'RECURSIVE' ] ( with_query { ',' with_query } ) ] \
           'SELECT' [ 'ALL' | 'DISTINCT' [ 'ON' ( '(' expression { ',' expression } ')' ) ] ]
               [ '*' | ( ( expression [ [ 'AS' ] name ] )
                         { ',' ( expression [ [ 'AS' ] name ] ) } ) ] \
               [ 'FROM' ( from_item { ','  from_item } ) ]
               [ 'WHERE' condition ] \
               [ 'GROUP' 'BY' ( grouping_element { ',' grouping_element } ) ]
               [ 'HAVING' ( condition { ',' condition } ) ] \
               [ ( 'UNION' | 'INTERSECT' | 'EXCEPT' ) [ 'ALL' | 'DISTINCT' ] select ]
               [ 'ORDER' 'BY' ( order_expr { ',' order_expr } ) ] \
               [ 'LIMIT' [ integer | 'ALL' ] ]
               [ 'OFFSET' integer [ 'ROW' | 'ROWS' ] ] ;

select_expression ::= expression [ [ 'AS' ] name ] ;

order_expr ::= expression [ 'ASC' | 'DESC' | 'USING' operator ] [ 'NULLS' ( 'FIRST' | 'LAST' ) ] ;

(* 'SET' variable *)
set ::= 'SET' [ 'SESSION' | 'LOCAL' ]
        ( configuration_parameter ( 'TO' | '=' ) ( value | 'DEFAULT' )
          | 'TIME' 'ZONE' ( timezone | 'LOCAL' | 'DEFAULT' ) ) ;

(* 'SET' 'CONSTRAINTS' *)
set_constraints ::= 'SET' 'CONSTRAINTS' ( 'ALL' | name { ',' name } ) ( 'DEFERRED' | 'IMMEDIATE' ) ;

(* 'SET' 'TRANSACTION' *)
set_transaction = 'SET' 'TRANSACTION' transaction_mode { transaction_mode } ;

transaction_mode = read_write_mode | isolation_level ;

read_write_mode = 'READ' 'ONLY' | 'READ' 'WRITE' ;

isolation_level = 'ISOLATION' 'LEVEL' ( 'READ' 'UNCOMMITTED'
                                       | 'READ' 'COMMITTED'
                                       | 'REPEATABLE' 'READ'
                                       | 'SERIALIZABLE' );

(* 'SHOW' variable *)
show_stmt ::= 'SHOW' ( name | 'ALL' ) ;

(* 'SHOW' 'TRANSACTION' *)
show_transaction ::= 'SHOW' 'TRANSACTION' 'ISOLATION' 'LEVEL' ;

(* 'TRUNCATE' *)
(*
truncate ::= 'TRUNCATE' [ 'TABLE' ] ( table_expr { ',' table_expr } ) ;
*)

truncate ::= 'TRUNCATE' [ 'TABLE' ]
             ( ( [ 'ONLY' ] name [ '*' ] ) { ',' ( [ 'ONLY' ] name [ '*' ] ) } ) ;

table_expr ::= [ 'ONLY' ] name [ '*' ] ;

(* 'UPDATE' *)
update ::= [ 'WITH' [ 'RECURSIVE' ] with_query { ',' with_query } ] \
       'UPDATE' [ 'ONLY' ] table_name [ '*' ] [ [ 'AS' ] alias ] \
       'SET' update_item { ',' update_item }
       (* [ 'FROM' from_list ] \ *)
       [ 'WHERE' condition | 'WHERE' 'CURRENT' 'OF' cursor_name ] \
       [ returning_clause ] ;

update_item ::= ( column_name '=' column_value
                  | '(' column_names ')' '=' [ 'ROW' ] '(' column_values ')'
                  | '(' column_names ')' '=' '(' query ')' ) ;

column_value ::= expression | 'DEFAULT' ;

(* 'COMMENT' *)
comment_on ::= 'COMMENT' 'ON' \
(
  'ACCESS' 'METHOD' object_name |
  'AGGREGATE' aggregate_name '(' aggregate_signature ')' |
  'CAST' '(' source_type 'AS' target_type ')' |
  'COLLATION' object_name |
  'COLUMN' relation_name '.' column_name |
  'CONSTRAINT' constraint_name 'ON' table_name |
  'CONSTRAINT' constraint_name 'ON' 'DOMAIN' domain_name |
  'CONVERSION' object_name |
  'DATABASE' object_name |
  'DOMAIN' object_name |
  'EXTENSION' object_name |
  'EVENT' 'TRIGGER' object_name |
  'FOREIGN' 'DATA' 'WRAPPER' object_name |
  'FOREIGN' 'TABLE' object_name |
  'FUNCTION' function_name [ '(' [ [ argmode ] [ argname ] argtype { ',' argtype } ] ')' ] |
  'INDEX' object_name |
  'LARGE' 'OBJECT' large_object_oid |
  'MATERIALIZED' 'VIEW' object_name |
  'OPERATOR' operator_name '(' left_type ',' right_type ')' |
  'OPERATOR' 'CLASS' object_name 'USING' index_method |
  'OPERATOR' 'FAMILY' object_name 'USING' index_method |
  'POLICY' policy_name 'ON' table_name |
  [ 'PROCEDURAL' ] 'LANGUAGE' object_name |
  'PROCEDURE' procedure_name [ '(' [ [ argmode ] [ argname ] argtype { ',' argtype } ] ')' ] |
  'PUBLICATION' object_name |
  'ROLE' object_name |
  'ROUTINE' routine_name [ '(' [ [ argmode ] [ argname ] argtype { ',' argtype } ] ')' ] |
  'RULE' rule_name 'ON' table_name |
  'SCHEMA' object_name |
  'SEQUENCE' object_name |
  'SERVER' object_name |
  'STATISTICS' object_name |
  'SUBSCRIPTION' object_name |
  'TABLE' object_name |
  'TABLESPACE' object_name |
  'TEXT' 'SEARCH' 'CONFIGURATION' object_name |
  'TEXT' 'SEARCH' 'DICTIONARY' object_name |
  'TEXT' 'SEARCH' 'PARSER' object_name |
  'TEXT' 'SEARCH' 'TEMPLATE' object_name |
  'TRANSFORM' 'FOR' type_name 'LANGUAGE' lang_name |
  'TRIGGER' trigger_name 'ON' table_name |
  'TYPE' object_name |
  'VIEW' object_name
) \ 'IS' ( '<Text Literal>' | 'NULL' ) ;

aggregate_signature ::= (
  '*' |
  [ argmode ] [ argname ] argtype { ',' argtype } |
  [ [ argmode ] [ argname ] argtype { ',' argtype } ] 'ORDER' 'BY' [ argmode ] [ argname ] argtype { ',' argtype }
) ;

(* Supporting rules *)

qualified_name ::= [ [ database_name '.' ] schema_name '.' ] '<Text Literal>' ;

database_name ::= '<Text Literal>' ;

schema_name ::= '<Text Literal>' ;

table_name ::= qualified_name ;

column_name ::= '<Text Literal>' ;

object_name ::= name ;
relation_name ::= qualified_name ;
aggregate_name ::= qualified_name ;
constraint_name ::= qualified_name ;
function_name ::= qualified_name ;
operator_name ::= qualified_name ;
policy_name ::= qualified_name ;
procedure_name ::= qualified_name ;
routine_name ::= qualified_name ;
rule_name ::= qualified_name ;
trigger_name ::= qualified_name ;

domain_name ::= qualified_name ;

index_method ::= '<Text Literal>';

source_type ::= '<Text Literal>' ;

target_type ::= '<Text Literal>' ;

argmode ::= ( 'IN' | 'OUT' | 'INOUT' | 'VARIADIC' ) ;

argname ::= name ;

argtype ::= '<Text Literal>' ;

large_object_oid ::= '<Integer Literal>' ;

left_type ::= ( qualified_name | 'NONE' ) ;
right_type ::= ( qualified_name | 'NONE' ) ;

type_name ::= name ;
lang_name ::= name ;

name ::= '<Text Literal>' ;

column_names ::= column_name { ',' column_name } ;

where_expression ::= boolean_expression ;

expression ::= '<expression>' ;

boolean ::= 'TRUE' | 'FALSE' ;

(* TODO(jason): change the below when issue #1557 is closed or closing *)
collation ::= ( '"default"' | '"C"' | '"POSIX"' | '"ucs_basic"' ) ;

type_name ::= qualified_name ;

attribute_name ::= '<Text Literal>' ;

data_type ::= type_name ;

label ::= '<Text Literal>' ;

subtype ::= type_name ;

operator_class_name ::= qualified_name ;

subtype_operator_class ::= operator_class_name ;

function_name ::= qualified_name ;

canonical_function ::= function_name ;

subtype_diff_function ::= function_name ;

input_function ::= function_name ;

output_function ::= function_name ;

receive_function ::= function_name ;

send_function ::= function_name ;

type_modifier_input_function ::= function_name ;

type_modifier_output_function ::= function_name ;

internallength ::= ( '-2' | '-1' | '<non-negative integer>' ) ;

alignment ::= ( 'CHAR' | 'INT2' | 'INT4' | 'DOUBLE' ) ;

storage ::= ( 'PLAIN' | 'EXTERNAL' | 'EXTENDED' | 'MAIN' ) ;

like_type ::= type_name ;

category ::= '<character>' ;

preferred ::= boolean ;

default ::= '<type value>' ;

element ::= type_name ;

delimiter ::= '<character>' ;

collatable ::= boolean ;

param_name ::= '<Text Literal>' ;

param_value ::= '<Text Literal>' ;
