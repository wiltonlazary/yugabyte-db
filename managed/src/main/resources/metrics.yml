# Copyright (c) YugaByte, Inc.
# Prometheus metrics query, and related params
---
cpu_usage_user:
  metric: "node_cpu"
  function: "irate|avg"
  range: "1m"
  operator: "* 100"
  filters:
    mode: "user"
  layout:
    title: "CPU Usage (User)"
    xaxis:
      type: "date"
    yaxis:
      ticksuffix: "&nbsp;%"

cpu_usage_system:
  metric: "node_cpu"
  function: "irate|avg"
  operator: "* 100"
  filters:
    mode: "system"
  layout:
    title: "CPU Usage (System)"
    xaxis:
      type: "date"
    yaxis:
      ticksuffix: "&nbsp;%"

disk_usage:
  metric: ""
  function: "sum"
  operator: "/ 1073741824"
  filters:
    saved_name: "node_filesystem_free|node_filesystem_size"
    mountpoint: "/mnt/.*"
  group_by: saved_name
  layout:
    title: "Disk Usage"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "node_filesystem_free": "free"
        "node_filesystem_size": "size"
      ticksuffix: "&nbsp;GB"

cpu_usage:
  metric: "node_cpu"
  function: "irate|avg"
  range: "1m"
  operator: "* 100"
  filters:
    mode: "user|system"
  group_by: "mode"
  layout:
    title: "CPU Usage"
    xaxis:
      type: "date"
    yaxis:
      ticksuffix: "&nbsp;%"

disk_iops:
  metric: ""
  function: "rate|sum without (device)|avg"
  range: "1m"
  filters:
    saved_name: "node_disk_reads_completed|node_disk_writes_completed"
  group_by: "saved_name"
  layout:
    title: "Disk IOPS / Node"
    xaxis:
      type: "date"
    yaxis:
      alias:
          "node_disk_writes_completed": "Writes"
          "node_disk_reads_completed": "Reads"

tserver_rpcs_per_sec_by_universe:
  metric: "rpc_latency_count"
  function: "irate|sum"
  range: "1m"
  filters:
    export_type: "tserver_export"
    server_type: "yb_tserver"
    service_type: "TabletServerService"
    service_method: "Read|Write"
  group_by: "service_method, node_prefix"
  layout:
    xaxis:
      type: "date"

memory_usage:
  metric: ""
  function: "avg"
  operator: "/ 1073741824"
  filters:
    saved_name: "node_memory_Cached|node_memory_Buffers|node_memory_MemFree"
  group_by: "saved_name"
  layout:
    title: "Memory Usage"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "node_memory_Cached": "cached"
        "node_memory_Buffers": "buffered"
        "node_memory_MemFree": "free"
      ticksuffix: "&nbsp;GB"


container_cpu_usage:
  metric: "container_cpu_usage_seconds_total/container_cpu_request"
  function: "rate|avg"
  range: "1m"
  filters:
    pod_name: "yb-tserver-(.*)"
    container_name: "yb-tserver"
  layout:
    title: "CPU Usage"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "container_cpu_usage_seconds_total/container_cpu_request": "cpu_usage"
      ticksuffix: "&nbsp;%"

container_cpu_request:
  metric: "kube_pod_container_resource_requests_cpu_cores"
  function: "avg"
  filters:
    pod_name: "yb-tserver-(.*)"
    container_name: "yb-tserver"
  layout:
    title: "CPU Request"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "kube_pod_container_resource_requests_cpu_cores": "cpu_requests"
      ticksuffix: "&nbsp;"

container_cpu_usage_seconds_total:
  metric: "container_cpu_usage_seconds_total"
  function: "rate|avg"
  range: "1m"
  filters:
    pod_name: "yb-tserver-(.*)"
    container_name: "yb-tserver"
  layout:
    title: "CPU Usage"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "container_cpu_usage_seconds_total": "cpu_usage"
      ticksuffix: "&nbsp;"

container_memory_usage:
  metric: "container_memory_working_set_bytes"
  function: "avg"
  operator: "/ 1073741824"
  filters:
    pod_name: "yb-tserver-(.*)"
    container_name: "yb-tserver"
  layout:
    title: "Memory Usage"
    xaxis:
      type: "date"
    yaxis:
      ticksuffix: "&nbsp;GB"
      alias:
        "container_memory_working_set_bytes": "memory_usage"

container_volume_stats:
  metric: "kubelet_volume_stats_used_bytes"
  function: "sum"
  operator: "/ 1073741824"
  filters:
    persistentvolumeclaim: "(.*)-yb-tserver-(.*)"
  layout:
    title: "Persistent Volume Stats"
    xaxis:
      type: "date"
    yaxis:
      ticksuffix: "&nbsp;GB"
      alias:
        "kubelet_volume_stats_used_bytes": "used"

container_volume_max_usage:
  metric: "kubelet_volume_stats_capacity_bytes"
  function: "sum"
  operator: "/ 1073741824"
  filters:
    persistentvolumeclaim: "(.*)-yb-tserver-(.*)"
  layout:
    title: "Persistent Volume Stats"
    xaxis:
      type: "date"
    yaxis:
      ticksuffix: "&nbsp;GB"
      alias:
        "kubelet_volume_stats_capacity_bytes": "used"

network_bytes:
  metric: ""
  function: "rate|avg"
  range: "1m"
  filters:
    saved_name: "node_network_receive_bytes|node_network_transmit_bytes"
    # Filter out devices starting with l, as a proxy for "lo", since we cannot model != "lo" ...
    device: "[^l].*"
  group_by: "saved_name"
  layout:
    title: "Network Bytes / Sec / Node"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "node_network_receive_bytes": "RX"
        "node_network_transmit_bytes": "TX"

network_packets:
  metric: ""
  function: "rate|avg"
  range: "1m"
  filters:
    saved_name: "node_network_receive_packets|node_network_transmit_packets"
    # Filter out devices starting with l, as a proxy for "lo", since we cannot model != "lo" ...
    device: "[^l].*"
  group_by: "saved_name"
  layout:
    title: "Network Packets / Sec / Node"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "node_network_receive_packets": "RX"
        "node_network_transmit_packets": "TX"

network_errors:
  metric: ""
  function: "rate|avg"
  range: "1m"
  filters:
    saved_name: "node_network_receive_errs|node_network_transmit_errs"
    # Filter out devices starting with l, as a proxy for "lo", since we cannot model != "lo" ...
    device: "[^l].*"
  group_by: "saved_name"
  layout:
    title: "Network Errors / Sec / Node"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "node_network_receive_errs": "RX"
        "node_network_transmit_errs": "TX"

system_load_over_time:
  metric: ""
  filters:
    saved_name: "node_load1|node_load5|node_load15"
  group_by: "saved_name"
  function: "avg"
  layout:
    title: "System Load Over Time"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "node_load1": "Small"
        "node_load5": "Medium"
        "node_load15": "Large"

disk_bytes_per_second_per_node:
  metric: ""
  filters:
    saved_name: "node_disk_bytes_read|node_disk_bytes_written"
  group_by: "saved_name"
  range: "1m"
  function: "rate|sum without (device)|avg"
  layout:
    title: "Disk Bytes / Sec / Node"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "node_disk_bytes_read": "Read"
        "node_disk_bytes_written": "Write"

redis_rpcs_per_sec_all:
  metric: "rpc_latency_count"
  function: "rate|sum"
  range: "1m"
  operator: "> 0"
  filters:
    server_type: "yb_redisserver"
    service_type: "RedisServerService"
  group_by: "service_method"
  layout:
    title: "Total YEDIS Ops / Sec"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "get": "Get"
        "mget": "MGet"
        "hget": "HGet"
        "tsget": "TsGet"
        "hmget": "HMGet"
        "hgetall": "HGetAll"
        "hkeys": "HKeys"
        "hvals": "HVals"
        "hlen": "HLen"
        "hexists": "HExists"
        "hstrlen": "HStrLen"
        "smembers": "SMembers"
        "sismember": "SIsMember"
        "scard": "SCard"
        "strlen": "StrLen"
        "exists": "Exists"
        "getrange": "GetRange"
        "set": "Set"
        "mset": "MSet"
        "hset": "HSet"
        "hincrby": "HIncrBy"
        "hmset": "HMSet"
        "hdel": "HDel"
        "sadd": "SAdd"
        "srem": "SRem"
        "tsadd": "TsAdd"
        "tsrangebytime": "TsRangeByTime"
        "tsrem": "TsRem"
        "getset": "GetSet"
        "append": "Append"
        "del": "Del"
        "setrange": "SetRange"
        "incr": "Incr"
        "echo": "Echo"
        "auth": "Auth"
        "config": "Config"
        "info": "Info"
        "role": "Role"
        "ping": "Ping"
        "command": "Command"
        "quit": "Quit"
        "flushdb": "FlushDB"

redis_rpcs_per_sec_hash:
  metric: "rpc_latency_count"
  function: "rate|sum"
  range: "1m"
  operator: "> 0"
  filters:
    server_type: "yb_redisserver"
    service_type: "RedisServerService"
    service_method: "hget|hmget|hgetall|hkeys|hvals|hlen|hexists|hstrlen|hset|hmset|hdel|hincrby"
  group_by: "service_method"
  layout:
    title: "Total YEDIS Ops / Sec -- Hash"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "hget": "HGet"
        "hmget": "HMGet"
        "hgetall": "HGetAll"
        "hkeys": "HKeys"
        "hvals": "HVals"
        "hlen": "HLen"
        "hexists": "HExists"
        "hstrlen": "HStrLen"
        "hset": "HSet"
        "hincrby": "HIncrBy"
        "hmset": "HMSet"
        "hdel": "HDel"

redis_rpcs_per_sec_ts:
  metric: "rpc_latency_count"
  function: "rate|sum"
  range: "1m"
  operator: "> 0"
  filters:
    server_type: "yb_redisserver"
    service_type: "RedisServerService"
    service_method: "tsget|tsadd|tsrangebytime|tsrem"
  group_by: "service_method"
  layout:
    title: "Total YEDIS Ops / Sec -- TS"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "tsget": "TsGet"
        "tsadd": "TsAdd"
        "tsrangebytime": "TsRangeByTime"
        "tsrem": "TsRem"

redis_rpcs_per_sec_set:
  metric: "rpc_latency_count"
  function: "rate|sum"
  range: "1m"
  operator: "> 0"
  filters:
    server_type: "yb_redisserver"
    service_type: "RedisServerService"
    service_method: "smembers|sismember|scard|strlen|sadd|srem"
  group_by: "service_method"
  layout:
    title: "Total YEDIS Ops / Sec -- Set"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "smembers": "SMembers"
        "sismember": "SIsMember"
        "scard": "SCard"
        "strlen": "StrLen"
        "sadd": "SAdd"
        "srem": "SRem"


redis_rpcs_per_sec_sortedset:
  metric: "rpc_latency_count"
  function: "rate|sum"
  range: "1m"
  operator: "> 0"
  filters:
    server_type: "yb_redisserver"
    service_type: "RedisServerService"
    service_method: "zadd|zrem|zcard|zrevrange|zrangebyscore"
  group_by: "service_method"
  layout:
    title: "Total YEDIS Ops / Sec -- Sorted Set"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "zadd": "ZAdd"
        "zrem": "ZRem"
        "zcard" : "ZCard"
        "zrangebyscore": "ZRangeByScore"
        "zrevrange": "ZRevRange"

redis_rpcs_per_sec_str:
  metric: "rpc_latency_count"
  function: "rate|sum"
  range: "1m"
  operator: "> 0"
  filters:
    server_type: "yb_redisserver"
    service_type: "RedisServerService"
    service_method: "get|mget|strlen|exists|getrange|set|mset|getset|append|del|setrange|incr"
  group_by: "service_method"
  layout:
    title: "Total YEDIS Ops / Sec -- Str"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "get": "Get"
        "mget": "MGet"
        "strlen": "StrLen"
        "exists": "Exists"
        "getrange": "GetRange"
        "set": "Set"
        "mset": "MSet"
        "getset": "GetSet"
        "append": "Append"
        "del": "Del"
        "setrange": "SetRange"
        "incr": "Incr"

redis_rpcs_per_sec_local:
  metric: "rpc_latency_count"
  function: "rate|sum"
  range: "1m"
  operator: "> 0"
  filters:
    server_type: "yb_redisserver"
    service_type: "RedisServerService"
    service_method: "echo|auth|config|info|role|ping|command|quit|flushdb"
  group_by: "service_method"
  layout:
    title: "Total YEDIS Ops / Sec -- Others"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "echo": "Echo"
        "auth": "Auth"
        "config": "Config"
        "info": "Info"
        "role": "Role"
        "ping": "Ping"
        "command": "Command"
        "quit": "Quit"
        "flushdb": "FlushDB"

redis_ops_latency_all:
  metric: "rpc_latency.avg"
  function: "rate|avg"
  # operator: "/ 1000 > 0"
  operator: " > 0"
  range: "1m"
  filters:
    server_type: "yb_redisserver"
    service_type: "RedisServerService"
  group_by: "service_method"
  layout:
    title: "YEDIS Op Latency"
    xaxis:
      type: "date"
    yaxis:
      #ticksuffix: "&nbsp;ms"
      ticksuffix: "&nbsp;\u00B5s"
      alias:
        "get": "Get"
        "mget": "MGet"
        "hget": "HGet"
        "tsget": "TsGet"
        "hmget": "HMGet"
        "hgetall": "HGetAll"
        "hkeys": "HKeys"
        "hvals": "HVals"
        "hlen": "HLen"
        "hexists": "HExists"
        "hstrlen": "HStrLen"
        "smembers": "SMembers"
        "sismember": "SIsMember"
        "scard": "SCard"
        "strlen": "StrLen"
        "exists": "Exists"
        "getrange": "GetRange"
        "set": "Set"
        "mset": "MSet"
        "hset": "HSet"
        "hincrby": "HIncrBy"
        "hmset": "HMSet"
        "hdel": "HDel"
        "sadd": "SAdd"
        "srem": "SRem"
        "tsadd": "TsAdd"
        "tsrangebytime": "TsRangeByTime"
        "tsrem": "TsRem"
        "getset": "GetSet"
        "append": "Append"
        "del": "Del"
        "setrange": "SetRange"
        "incr": "Incr"
        "echo": "Echo"
        "auth": "Auth"
        "config": "Config"
        "info": "Info"
        "role": "Role"
        "ping": "Ping"
        "command": "Command"
        "quit": "Quit"
        "flushdb": "FlushDB"


redis_ops_latency_hash:
  metric: "rpc_latency.avg"
  function: "rate|avg"
  # operator: "/ 1000 > 0"
  operator: " > 0"
  range: "1m"
  filters:
    server_type: "yb_redisserver"
    service_type: "RedisServerService"
    service_method: "hget|hmget|hgetall|hkeys|hvals|hlen|hexists|hstrlen|hincrby|hset|hmset|hdel"
  group_by: "service_method"
  layout:
    title: "YEDIS Op Latency -- Hash"
    xaxis:
      type: "date"
    yaxis:
      #ticksuffix: "&nbsp;ms"
      ticksuffix: "&nbsp;\u00B5s"
      alias:
        "hget": "HGet"
        "hmget": "HMGet"
        "hgetall": "HGetAll"
        "hkeys": "HKeys"
        "hvals": "HVals"
        "hlen": "HLen"
        "hexists": "HExists"
        "hstrlen": "HStrLen"
        "hset": "HSet"
        "hincrby": "HIncrBy"
        "hmset": "HMSet"
        "hdel": "HDel"

redis_ops_latency_ts:
  metric: "rpc_latency.avg"
  function: "rate|avg"
  # operator: "/ 1000 > 0"
  operator: " > 0"
  range: "1m"
  filters:
    server_type: "yb_redisserver"
    service_type: "RedisServerService"
    service_method: "tsget|tsadd|tsrangebytime|tsrem"
  group_by: "service_method"
  layout:
    title: "YEDIS Op Latency -- TS"
    xaxis:
      type: "date"
    yaxis:
      #ticksuffix: "&nbsp;ms"
      ticksuffix: "&nbsp;\u00B5s"
      alias:
        "tsget": "TsGet"
        "tsadd": "TsAdd"
        "tsrangebytime": "TsRangeByTime"
        "tsrem": "TsRem"

redis_ops_latency_set:
  metric: "rpc_latency.avg"
  function: "rate|avg"
  # operator: "/ 1000 > 0"
  operator: " > 0"
  range: "1m"
  filters:
    server_type: "yb_redisserver"
    service_type: "RedisServerService"
    service_method: "smembers|sismember|scard|strlen|sadd|srem"
  group_by: "service_method"
  layout:
    title: "YEDIS Op Latency -- Set"
    xaxis:
      type: "date"
    yaxis:
      #ticksuffix: "&nbsp;ms"
      ticksuffix: "&nbsp;\u00B5s"
      alias:
        "smembers": "SMembers"
        "sismember": "SIsMember"
        "scard": "SCard"
        "strlen": "StrLen"
        "sadd": "SAdd"
        "srem": "SRem"

redis_ops_latency_sorted_set:
  metric: "rpc_latency.avg"
  function: "rate|avg"
  # operator: "/ 1000 > 0"
  operator: " > 0"
  range: "1m"
  filters:
    server_type: "yb_redisserver"
    service_type: "RedisServerService"
    service_method: "zadd|zrem|zcard|zrevrange|zrangebyscore"
  group_by: "service_method"
  layout:
    title: "YEDIS Op Latency -- Sorted Set"
    xaxis:
      type: "date"
    yaxis:
      #ticksuffix: "&nbsp;ms"
      ticksuffix: "&nbsp;\u00B5s"
      alias:
        "zcard": "ZCard"
        "zadd": "ZAdd"
        "zrem": "ZRem"
        "zrangebyscore": "ZRangeByScore"
        "zrevrange": "ZRevRange"

redis_ops_latency_str:
  metric: "rpc_latency.avg"
  function: "rate|avg"
  # operator: "/ 1000 > 0"
  operator: " > 0"
  range: "1m"
  filters:
    server_type: "yb_redisserver"
    service_type: "RedisServerService"
    service_method: "get|mget|strlen|exists|getrange|set|mset|getset|append|del|setrange|incr"
  group_by: "service_method"
  layout:
    title: "YEDIS Op Latency -- Str"
    xaxis:
      type: "date"
    yaxis:
      #ticksuffix: "&nbsp;ms"
      ticksuffix: "&nbsp;\u00B5s"
      alias:
        "get": "Get"
        "mget": "MGet"
        "strlen": "StrLen"
        "exists": "Exists"
        "getrange": "GetRange"
        "set": "Set"
        "mset": "MSet"
        "getset": "GetSet"
        "append": "Append"
        "del": "Del"
        "setrange": "SetRange"
        "incr": "Incr"

redis_ops_latency_local:
  metric: "rpc_latency.avg"
  function: "rate|avg"
  # operator: "/ 1000 > 0"
  operator: " > 0"
  range: "1m"
  filters:
    server_type: "yb_redisserver"
    service_type: "RedisServerService"
    service_method: "echo|auth|config|info|role|ping|command|quit|flushdb"
  group_by: "service_method"
  layout:
    title: "YEDIS Op Latency -- Others"
    xaxis:
      type: "date"
    yaxis:
      #ticksuffix: "&nbsp;ms"
      ticksuffix: "&nbsp;\u00B5s"
      alias:
        "echo": "Echo"
        "auth": "Auth"
        "config": "Config"
        "info": "Info"
        "role": "Role"
        "ping": "Ping"
        "command": "Command"
        "quit": "Quit"
        "flushdb": "FlushDB"

# what does this have to do with redis??
redis_yb_local_vs_remote_ops:
  metric: "rpc_latency_count"
  function: "rate|avg"
  range: "1m"
  filters:
    export_type: "redis_export"
    service_type: "read|write"
    service_method: "local|remote"
  group_by: "service_method,service_type"
  layout:
    title: "YBClient Ops Local vs Remote"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "remote,read": "Remote Read"
        "remote,write": "Remote Write"
        "local,read": "Local Read"
        "local,write": "Local Write"

redis_yb_local_vs_remote_latency:
  metric: "rpc_latency.avg"
  function: "irate|avg"
  range: "1m"
  filters:
    export_type: "redis_export"
    service_type: "read|write"
    service_method: "local|remote"
  group_by: "service_method,service_type"
  layout:
    title: "YBClient Latency Local vs Remote"
    xaxis:
      type: "date"
    yaxis:
      alias:
         "remote,read": "Remote Read"
         "remote,write": "Remote Write"
         "local,read": "Local Read"
         "local,write": "Local Write"
      ticksuffix: "&nbsp;\u00B5s"

redis_reactor_latency:
  metric: "rpc_incoming_queue_time.avg|handler_latency_outbound_transfer.avg|handler_latency_outbound_call_queue_time.avg"
  function: "irate|avg"
  range: "1m"
  filters:
    export_type: "redis_export"
  layout:
    title: "YBClient Reactor Delays"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "rpc_incoming_queue_time.avg": "Incoming Queue"
        "handler_latency_outbound_transfer.avg": "Outbound transfer time"
        "handler_latency_outbound_call_queue_time.avg": "Outbound queue time"
      ticksuffix: "&nbsp;\u00B5s"

# tserver metrics
tserver_ops_latency:
  metric: "rpc_latency.avg"
  function: "irate|avg"
  range: "1m"
  # operator: "/ 1000"
  filters:
    export_type: "tserver_export"
    server_type: "yb_tserver"
    service_type: "TabletServerService"
    service_method: "Read|Write|Scan"
  group_by: "service_method"
  layout:
    title: "Average Latency"
    xaxis:
      type: "date"
    yaxis:
      # ticksuffix: "&nbsp;ms"
      ticksuffix: "&nbsp;\u00B5s"

tserver_handler_latency:
  metric: "rpc_incoming_queue_time.avg|handler_latency_outbound_call_queue_time.avg|handler_latency_outbound_transfer.avg"
  function: "irate|avg"
  range: "1m"
  # operator: "/ 1000"
  filters:
    export_type: "tserver_export"
  layout:
    title: "Reactor Delays"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "rpc_incoming_queue_time.avg": "Incoming queue time"
        "handler_latency_outbound_call_queue_time.avg": "Outbound queue time"
        "handler_latency_outbound_transfer.avg": "Outbound transfer time"
      #ticksuffix: "&nbsp;ms"
      ticksuffix: "&nbsp;\u00B5s"

total_rpcs_per_sec:
  metric: "rpc_latency_count"
  function: "irate|sum"
  range: "1m"
  filters:
    export_type: "tserver_export"
    server_type: "yb_tserver"
    service_type: "TabletServerService"
    service_method: "Write|Read|Scan"
  group_by: "service_method"
  layout:
    title: "Total Ops / Sec"
    xaxis:
      type: "date"

tserver_rpcs_per_sec_per_node:
  metric: "rpc_latency_count"
  function: "irate|avg"
  range: "1m"
  filters:
    export_type: "tserver_export"
    server_type: "yb_tserver"
    service_type: "TabletServerService"
    service_method: "Write|Read|Scan"
  group_by: "service_method"
  layout:
    title: "Ops / Sec / Node"
    xaxis:
      type: "date"

tserver_consensus_rpcs_per_sec:
  metric: "rpc_latency_count"
  function: "rate|sum"
  range: "1m"
  filters:
    export_type: "tserver_export"
    server_type: "yb_consensus"
    service_type: "ConsensusService"
    service_method: "UpdateConsensus|RequestConsensusVote"
  group_by: "service_method"
  layout:
    title: "Consensus Ops / Sec"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "UpdateConsensus": "UpdateConsensus"
        "RequestConsensusVote": "RequestConsensusVote"

tserver_change_config:
  metric: "rpc_latency_count"
  function: "sum"
  filters:
    export_type: "tserver_export"
    server_type: "yb_consensus"
    service_type: "ConsensusService"
    service_method: "ChangeConfig|RunLeaderElection|LeaderStepDown|LeaderElectionLost"
  group_by: "service_method"
  layout:
    title: "Total Consensus Change Config"
    xaxis:
      type: "date"

tserver_remote_bootstraps:
  metric: "rpc_latency_count"
  function: "sum"
  filters:
    export_type: "tserver_export"
    server_type: "yb_consensus"
    service_type: "ConsensusService"
    service_method: "StartRemoteBootstrap"
  layout:
    title: "Remote Bootstraps"
    xaxis:
      type: "date"
    yaxis:
      alias:
        rpc_latency_count: "remote bootstraps"

tserver_consensus_rpcs_latency:
  metric: "rpc_latency.avg"
  function: "irate|avg"
  # operator: "/ 1000"
  range: "1m"
  filters:
    export_type: "tserver_export"
    server_type: "yb_consensus"
    service_type: "ConsensusService"
    service_method: "UpdateConsensus|RequestConsensusVote"
  group_by: "service_method"
  layout:
    title: "Consensus Rpc Latencies"
    xaxis:
      type: "date"
    yaxis:
      ticksuffix: "&nbsp;\u00B5s"

tserver_change_config_latency:
  metric: "rpc_latency.avg"
  function: "irate|avg"
  # operator: "/ 1000"
  range: "1m"
  filters:
    export_type: "tserver_export"
    server_type: "yb_consensus"
    service_type: "ConsensusService"
    service_method: "ChangeConfig"
  group_by: "service_method"
  layout:
    title: "Change Config Latency"
    xaxis:
      type: "date"
    yaxis:
      ticksuffix: "&nbsp;\u00B5s"

tserver_threads:
  metric: ""
  function: "avg"
  filters:
    export_type: "tserver_export"
    saved_name: "threads_running|threads_started"
  group_by: "saved_name"
  layout:
    title: "Threads"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "threads_running": "Running"
        "threads_started": "Started"

tserver_context_switches:
  metric: ""
  function: "irate|avg"
  range: "1m"
  filters:
    export_type: "tserver_export"
    saved_name: "involuntary_context_switches|voluntary_context_switches"
  group_by: "saved_name"
  layout:
    title: "Context Switches"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "involuntary_context_switches": "Involuntary"
        "voluntary_context_switches": "Voluntary"
tserver_spinlock_server:
  metric: "spinlock_contention_time"
  function: "rate|avg"
  operator: "/ 1000000"
  range: "1m"
  filters:
    export_type: "tserver_export"
  layout:
    title: "SpinLock Time/Server"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "spinlock_contention_time": "SpinLock"
      ticksuffix: "&nbsp;sec"
tserver_log_latency:
  metric: "log_sync_latency.avg|log_group_commit_latency.avg|log_append_latency.avg"
  function: "irate|avg"
  range: "1m"
  layout:
    title: "TServer Log Latency"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "log_sync_latency.avg": "Sync"
        "log_group_commit_latency.avg": "Commit"
        "log_append_latency.avg": "Append"
      ticksuffix: "&nbsp;\u00B5s"

tserver_log_bytes_written:
  metric: "log_bytes_logged"
  function: "rate|sum without (table_id, table_name)|avg"
  range: "1m"
  filters:
    export_type: "tserver_export"
  layout:
    title: "Log Bytes Written / Sec / Node"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "log_bytes_logged": "Log Bytes Logged"

tserver_log_bytes_read:
  metric: "log_reader_bytes_read"
  function: "rate|sum without (table_id, table_name)|avg"
  range: "1m"
  filters:
    export_type: "tserver_export"
  layout:
    title: "Log Bytes Read / Sec / Node"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "log_reader_bytes_read": "Log Bytes Read"

tserver_log_ops_second:
  metric: ""
  function: "rate|sum without (table_id, table_name)|avg"
  range: "1m"
  filters:
    export_type: "tserver_export"
    saved_name: "log_group_commit_latency_count|log_append_latency_count|log_sync_latency_count"
  group_by: "saved_name"
  layout:
    title: "TServer Log Ops / Sec / Node"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "log_group_commit_latency_count": "Commit"
        "log_append_latency_count": "Append"
        "log_sync_latency_count": "Sync"

tserver_tc_malloc_stats:
  metric: ""
  function: "avg"
  operator: "/ 1048576"
  filters:
    export_type: "tserver_export"
    saved_name: "generic_current_allocated_bytes|generic_heap_size"
  group_by: "saved_name"
  layout:
    title: "TServer TCMalloc Stats"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "generic_current_allocated_bytes": "In Use"
        "generic_heap_size": "Total"
      ticksuffix: "&nbsp;MB"

tserver_log_stats:
  metric: ""
  function: "sum without (table_id, table_name)|avg"
  operator: "/ 1024"
  filters:
    export_type: "tserver_export"
    saved_name: "log_reader_bytes_read|log_cache_size"
  group_by: "saved_name"
  layout:
    title: "Log Stats / Node"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "log_reader_bytes_read": "Log Bytes Read"
        "log_cache_size": "Log Cache Size"
      ticksuffix: "&nbsp;KB"

tserver_cache_reader_num_ops:
  metric: "log_cache_num_ops"
  function: "sum without (table_id, table_name)|avg"
  filters:
    export_type: "tserver_export"
  layout:
    title: "Log Cache Num Ops / Node"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "log_cache_num_ops": "Num Ops"
tserver_glog_info_messages:
  metric: ""
  function: "rate|sum"
  range: "1m"
  filters:
    export_type: "tserver_export"
    saved_name: "glog_info_messages|glog_warning_messages|glog_error_messages"
  group_by: "saved_name"
  layout:
    title: "Glog messages"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "glog_info_messages": "Info"
        "glog_warning_messages": "Warning"
        "glog_error_messages": "Error"
node_up:
  metric: "up"
  function: "avg"
  group_by: "instance"

lsm_rocksdb_num_seek_or_next:
  metric: ""
  function: "rate|sum without (table_id, table_name)|avg"
  range: "1m"
  filters:
    export_type: "tserver_export"
    saved_name: "rocksdb_number_db_seek|rocksdb_number_db_next"
  group_by: "saved_name"
  layout:
    title: "LSM-DB Seek/Next Num Ops"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "rocksdb_number_db_seek": "Seek"
        "rocksdb_number_db_next": "Next"

lsm_rocksdb_num_seeks_per_node:
  metric: "rocksdb_number_db_seek"
  function: "rate|sum without (table_id, table_name)|avg"
  range: "1m"
  filters:
    export_type: "tserver_export"
  layout:
    title: "LSM-DB Seeks / Sec / Node"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "rocksdb_number_db_seek": "Seek"

lsm_rocksdb_total_sst_per_node:
  metric: "rocksdb_total_sst_file_size"
  function: "sum without (table_id, table_name)|avg"
  operator: "/ 1073741824"
  filters:
    export_type: "tserver_export"
  layout:
    title: "SSTable size / Node"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "rocksdb_total_sst_file_size": "Size of SSTables"
      ticksuffix: "&nbsp;GB"
      tickformat: ".2f"

lsm_rocksdb_avg_num_sst_per_node:
  metric: "rocksdb_current_version_num_sst_files"
  function: "sum without (table_id, table_name)|avg"
  filters:
    export_type: "tserver_export"
  layout:
    title: "Average SSTables / Node"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "rocksdb_current_version_num_sst_files": "Average SSTables / Node"

lsm_rocksdb_blooms_checked_and_useful:
  metric: ""
  function: "rate|sum without (table_id, table_name)|avg"
  range: "1m"
  filters:
    export_type: "tserver_export"
    saved_name: "rocksdb_bloom_filter_checked|rocksdb_bloom_filter_useful"
  group_by: "saved_name"
  layout:
    title: "LSM-DB Blooms usefulness"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "rocksdb_bloom_filter_checked": "Blooms checked"
        "rocksdb_bloom_filter_useful": "Blooms useful"

lsm_rocksdb_latencies_get:
  metric: "rocksdb_db_get_micros.avg"
  function: "rate|sum without (table_id, table_name)|avg"
  range: "1m"
  filters:
    export_type: "tserver_export"
  layout:
    title: "LSM-DB Get Latencies"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "rocksdb_db_get_micros.avg": "Get"
      ticksuffix: "&nbsp;\u00B5s"

lsm_rocksdb_latencies_write:
  metric: "rocksdb_db_write_micros.avg"
  function: "rate|sum without (table_id, table_name)|avg"
  range: "1m"
  filters:
    export_type: "tserver_export"
  layout:
    title: "LSM-DB Write Latencies"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "rocksdb_db_write_micros.avg": "Write"
      ticksuffix: "&nbsp;\u00B5s"

lsm_rocksdb_latencies_seek:
  metric: "rocksdb_db_seek_micros.avg"
  function: "rate|sum without (table_id, table_name)|avg"
  range: "1m"
  layout:
    title: "LSM-DB Seek Latencies"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "rocksdb_db_seek_micros.avg": "Seek"
      ticksuffix: "&nbsp;\u00B5s"

lsm_rocksdb_latencies_mutex:
  metric: "rocksdb_db_mutex_wait_micros.avg"
  function: "rate|sum without (table_id, table_name)|avg"
  range: "1m"
  filters:
    export_type: "tserver_export"
  layout:
    title: "LSM-DB Mutex Wait Latencies"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "rocksdb_db_mutex_wait_micros.avg": "Mutex"
      ticksuffix: "&nbsp;\u00B5s"

lsm_rocksdb_block_cache_hit_miss:
  metric: ""
  function: "rate|sum without (table_id, table_name)|avg"
  range: "1m"
  filters:
    saved_name: "rocksdb_block_cache_hit|rocksdb_block_cache_miss"
    export_type: "tserver_export"
  group_by: "saved_name"
  layout:
    title: "Cache Hit & Miss"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "rocksdb_block_cache_hit": "Hit"
        "rocksdb_block_cache_miss": "Miss"

lsm_rocksdb_block_cache_usage:
  metric: ""
  function: "avg"
  operator: "/ 1073741824"
  filters:
    saved_name: "block_cache_single_touch_usage|block_cache_multi_touch_usage"
    export_type: "tserver_export"
  group_by: "saved_name"
  layout:
    title: "Block cache usage"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "block_cache_single_touch_usage": "Single Touch"
        "block_cache_multi_touch_usage": "Multi Touch"
      ticksuffix: "&nbsp;GB"

lsm_rocksdb_block_cache_add:
  metric: ""
  function: "rate|sum without (table_id, table_name)|avg"
  range: "1m"
  filters:
    saved_name: "rocksdb_block_cache_add|rocksdb_block_cache_single_touch_add|rocksdb_block_cache_multi_touch_add"
    export_type: "tserver_export"
  group_by: "saved_name"
  layout:
    title: "Cache Add"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "rocksdb_block_cache_add": "Add"
        "rocksdb_block_cache_single_touch_add": "Single Touch Add"
        "rocksdb_block_cache_multi_touch_add": "Multi Touch Add"

lsm_rocksdb_stalls:
  metric: "rocksdb_stall_micros"
  function: "rate|sum without (table_id, table_name)|avg"
  range: "1m"
  filters:
    export_type: "tserver_export"
  layout:
    title: "Stalls"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "rocksdb_stall_micros": "Stalls"
      ticksuffix: "&nbsp;\u00B5s"

lsm_rocksdb_flush_size:
  metric: "rocksdb_flush_write_bytes"
  function: "rate|sum without (table_id, table_name)|avg"
  range: "1m"
  operator: "/ 1048576"
  layout:
    title: "Flush write"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "rocksdb_flush_write_bytes": "Flush"
      ticksuffix: "&nbsp;MB"

lsm_rocksdb_compaction:
  metric: ""
  function: "rate|sum without (table_id, table_name)|avg"
  range: "1m"
  operator: "/ 1048576"
  filters:
    export_type: "tserver_export"
    saved_name: "rocksdb_compact_read_bytes|rocksdb_compact_write_bytes"
  group_by: "saved_name"
  layout:
    title: "Compaction"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "rocksdb_compact_read_bytes": "Bytes Read"
        "rocksdb_compact_write_bytes": "Bytes Written"
      ticksuffix: "&nbsp;MB"

lsm_rocksdb_compaction_numfiles:
  metric: "rocksdb_numfiles_in_singlecompaction.avg"
  function: "irate|sum without (table_id, table_name)|avg"
  range: "1m"
  filters:
    export_type: "tserver_export"
  layout:
    title: "Compaction num files"
    xaxis:
      type: "date"
    yaxis:
      alias:
          "rocksdb_numfiles_in_singlecompaction.avg": "Avg"

lsm_rocksdb_compaction_time:
  metric: "rocksdb_compaction_times_micros.avg"
  function: "irate|sum without (table_id, table_name)|avg"
  range: "1m"
  #operator: "/ 1000000"
  filters:
    export_type: "tserver_export"
  layout:
    title: "Compaction time"
    xaxis:
      type: "date"
    yaxis:
      alias:
          "rocksdb_compaction_times_micros.avg": "Avg"
      ticksuffix: "&nbsp;\u00B5s"

docdb_transaction:
  metric: ""
  function: "irate|sum"
  range: "1m"
  filters:
    saved_name: "transaction_conflicts|expired_transactions"
    export_type: "tserver_export"
  group_by: "saved_name"
  layout:
    title: "Transaction"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "transaction_conflicts": "Transaction Conflicts"
        "expired_transactions": "Expired Transactions"

#Ysql Metrics
ysql_server_rpc_per_second:
  metric: "rpc_latency_count"
  function: "irate|sum"
  range : "1m"
  filters:
    export_type: "ysql_export"
    server_type: "yb_ysqlserver"
    service_type: "SQLProcessor"
    service_method: "SelectStmt|InsertStmt|UpdateStmt|DeleteStmt|OtherStmts"
  group_by: "service_method"
  layout:
    title: "Total YSQL Ops / Sec"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "SelectStmt": "Select"
        "InsertStmt": "Insert"
        "UpdateStmt": "Update"
        "DeleteStmt": "Delete"
        "OtherStmt": "Other"

ysql_sql_latency:
  metric: "rpc_latency.avg"
  function: "irate|avg"
  range : "1m"
  filters:
    export_type: "ysql_export"
    server_type: "yb_ysqlserver"
    service_type: "SQLProcessor"
    service_method: "SelectStmt|InsertStmt|UpdateStmt|DeleteStmt|OtherStmts"
  group_by: "service_method"
  layout:
    title: "YSQL Op Latency"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "SelectStmt": "Select"
        "InsertStmt": "Insert"
        "UpdateStmt": "Update"
        "DeleteStmt": "Delete"
        "OtherStmts": "Others"
      ticksuffix: "&nbsp;\u00B5s"

#Cassandra Metrics
cql_server_rpc_per_second:
  metric: "rpc_latency_count"
  function: "irate|sum"
  # operator: "/ 1000"
  range : "1m"
  filters:
    server_type: "yb_cqlserver"
    service_type: "SQLProcessor"
    service_method: "SelectStmt|InsertStmt|UpdateStmt|DeleteStmt|OtherStmts"
  group_by: "service_method"
  layout:
    title: "Total YCQL Ops / Sec"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "SelectStmt": "Select"
        "InsertStmt": "Insert"
        "UpdateStmt": "Update"
        "DeleteStmt": "Delete"
        "OtherStmts": "Other"

cql_sql_latency:
  metric: "rpc_latency.avg"
  function: "irate|avg"
  # operator: "/ 1000"
  range : "1m"
  filters:
    server_type: "yb_cqlserver"
    service_type: "SQLProcessor"
    service_method: "SelectStmt|InsertStmt|UpdateStmt|DeleteStmt|OtherStmts"
  group_by: "service_method"
  layout:
    title: "YCQL Op Latency"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "SelectStmt": "Select"
        "InsertStmt": "Insert"
        "UpdateStmt": "Update"
        "DeleteStmt": "Delete"
        "OtherStmts": "Others"
      #ticksuffix: "&nbsp;ms"
      ticksuffix: "&nbsp;\u00B5s"

cql_sql_latency_breakdown:
  metric: "rpc_latency.avg"
  function: "irate|sum"
  range : "1m"
  filters:
    export_type: "cql_export"
    server_type: "yb_cqlserver"
    service_type: "CQLServerService"
    service_method: "ProcessRequest|ParseRequest|AnalyzeRequest|ExecuteRequest"
  group_by: "service_method"
  layout:
    title: "YCQL Latency Breakdown"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "ProcessRequest": "Total"
        "ParseRequest": "Parse"
        "AnalyzeRequest": "Analyze"
        "ExecuteRequest": "Execute"
      ticksuffix: "&nbsp;\u00B5s"

cql_yb_rpc_connections:
  metric: "rpc_connections_alive"
  function: "irate|avg"
  range: "1m"
  filters:
    metric_id: "yb.cqlserver"
  layout:
    title: "YCQL Inbound Connections"
    xaxis:
      type: "date"

cql_yb_local_vs_remote:
  metric: "rpc_latency_count"
  function: "rate|avg"
  range: "1m"
  filters:
    export_type: "cql_export"
    service_type: "read|write"
    service_method: "local|remote"
  group_by: "service_method,service_type"
  layout:
    title: "YBClient Ops Local vs Remote"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "remote,read": "Remote Read"
        "remote,write": "Remote Write"
        "local,read": "Local Read"
        "local,write": "Local Write"

cql_yb_latency:
  metric: "rpc_latency.avg"
  function: "irate|avg"
  range: "1m"
  filters:
    export_type: "cql_export"
    service_type: "read|write"
    service_method: "local|remote"
  group_by: "service_method,service_type"
  layout:
    title: "YBClient Latency"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "remote,read": "Remote Read"
        "remote,write": "Remote Write"
        "local,read": "Local Read"
        "local,write": "Local Write"
      ticksuffix: "&nbsp;\u00B5s"

cql_yb_transaction:
  metric: "rpc_latency.avg"
  function: "irate|avg"
  range: "1m"
  filters:
    export_type: "cql_export"
    service_type: "SQLProcessor"
    service_method: "Transaction"
  group_by: "service_method"
  layout:
    title: "Transaction"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "Transaction": "Transaction Execution"
      ticksuffix: "&nbsp;\u00B5s"

cql_reactor_latency:
  metric: "rpc_incoming_queue_time.avg|handler_latency_outbound_call_queue_time.avg|handler_latency_outbound_transfer.avg"
  function: "irate|avg"
  range: "1m"
  # operator: "/ 1000"
  filters:
    export_type: "cql_export"
  layout:
    title: "Reactor Delays"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "rpc_incoming_queue_time.avg": "Incoming queue time"
        "handler_latency_outbound_call_queue_time.avg": "Outbound queue time"
        "handler_latency_outbound_transfer.avg": "Outbound transfer time"
      #ticksuffix: "&nbsp;ms"
      ticksuffix: "&nbsp;\u00B5s"

response_sizes:
  metric: "rpc_latency.avg"
  function: "irate|avg"
  range: "1m"
  filters:
    server_type: "yb_cqlserver"
    service_type: "SQLProcessor"
    service_method: "ResponseSize"
  group_by: "service_method"
  layout:
    title: "Response Size (bytes)"
    xaxis:
      type: "date"
    yaxis:
      alias:
        "ResponseSize": "Response Size"
