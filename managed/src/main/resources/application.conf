## Secret key
# http://www.playframework.com/documentation/latest/ApplicationSecret
# ~~~~~
# The secret key is used to sign Play's session cookie.
# This must be changed for production, but we don't recommend you change it in this file.
play.crypto.secret = "changeme"

# Lets disable the default play evolutions and use flyway db
play.evolutions.enabled=false
play.modules.enabled += "org.flywaydb.play.PlayModule"

play.i18n.langs = [ "en" ]

# Tracking postgresql connection details
db {
  default.driver="org.postgresql.Driver"
  default.url="jdbc:postgresql://localhost/yugaware"
  default.username="root"
  default.password=""
  default.password=${?DB_PASSWORD}
  default.logStatements=true
  default.migration.initOnMigrate=true
  default.migration.auto=true
}

ebean {
  default = ["com.yugabyte.yw.models.*"]
}

yb {
  grafana.accessKey="changeme"
  devops.home = ""
  # Override in case DEVOPS_HOME is set.
  devops.home = ${?DEVOPS_HOME}
  swamper.targetPath = ""
  # Override in case SWAMPER_TARGET_PATH is set.
  swamper.targetPath = ${?SWAMPER_TARGET_PATH}
  metrics.url = ""
  # Override in case METRICS_URL is set.
  metrics.url = ${?METRICS_URL}
  metrics.scrape_interval_secs = 10
  metrics.useNative= false
  # Override in case USE_NATIVE_METRICS is set.
  metrics.useNative = ${?USE_NATIVE_METRICS}
  seedData = true
  storage.path = "/opt/yugaware"
  docker.network = "bridge"
  docker.release = ""
  multiTenant = true
  releases.path = "/opt/yugabyte/releases"
  thirdparty.packagePath = /opt/third-party
  helm.package = ""
  helm.package = ${?HELM_PACKAGE_PATH}
  helm.timeout_secs = 900
  # Interval at which to check the status of every universe. Default: 5 minutes.
  health.check_interval_ms = 300000
  # Interval at which to send a status report email. Default: 12 hours.
  health.status_interval_ms = 43200000
  # Email address to send alerts to at YugaByte.
  health.default_email = ${?YB_ALERTS_EMAIL}
  # Env vars propagated to the health checking script.
  health.ses_email_username = ${?YB_ALERTS_USERNAME}
  health.ses_email_password = ${?YB_ALERTS_PASSWORD}
  security.use_oauth = false
  security.use_oauth = ${?USE_OAUTH}
  security.type = ""
  # Override in case SECURITY_TYPE is set.
  security.type = ${?YB_SECURITY_TYPE}
  security.clientID = ""
  security.clientID = ${?YB_OIDC_CLIENT_ID}
  security.secret = ""
  security.secret = ${?YB_OIDC_SECRET}
  security.discoveryURI = ""
  security.discoveryURI = ${?YB_OIDC_DISCOVERY_URI}
  url = ""
  url = ${?YW_URL}
  security.oidcScope = ""
  security.oidcScope = ${?YB_OIDC_SCOPE}
  security.oidcEmailAttribute = ""
  security.oidcEmailAttribute = ${?YB_OIDC_EMAIL_ATTR}
}

play.filters {
  # CSRF config
  csrf {
    cookie {
      # If non null, the CSRF token will be placed in a cookie with this name
      name = "csrfCookie"
      # Whether the cookie should be set to secure
      secure = false
      # Whether the cookie should have the HTTP only flag set
      httpOnly = false
    }
    # Whether to bypass CSRF check if CORS check is satisfied
    bypassCorsTrustedOrigins = false
    header {
      # The name of the header to accept CSRF tokens from.
      name = "Csrf-Token"
    }
  }
  cors {
    pathPrefixes = ["/"]
    allowedOrigins = ["http://localhost:3000", ${?CUSTOM_ALLOWED_ORIGIN}]
    supportsCredentials=true
    allowedHttpMethods = ["GET", "POST", "PUT", "OPTIONS", "DELETE"]
    allowedHttpHeaders = ["Accept", "Origin", "Content-Type", "X-Auth-Token", "X-AUTH-YW-API-TOKEN", ${play.filters.csrf.header.name}]
  }
}
