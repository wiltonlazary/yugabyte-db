// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// The following only applies to changes made to this file as part of YugaByte development.
//
// Portions Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//
syntax = "proto2";

package yb.tserver;

option java_package = "org.yb.tserver";

import "yb/common/common.proto";
import "yb/common/wire_protocol.proto";
import "yb/common/redis_protocol.proto";
import "yb/common/ql_protocol.proto";
import "yb/common/pgsql_protocol.proto";
import "yb/tablet/tablet.proto";
import "yb/docdb/docdb.proto";

// Tablet-server specific errors use this protobuf.
message TabletServerErrorPB {
  enum Code {
    // An error which has no more specific error code.
    // The code and message in 'status' may reveal more details.
    //
    // RPCs should avoid returning this, since callers will not be
    // able to easily parse the error.
    UNKNOWN_ERROR = 1;

    // The schema provided for a request was not well-formed.
    INVALID_SCHEMA = 2;

    // The row data provided for a request was not well-formed.
    INVALID_ROW_BLOCK = 3;

    // The mutations or mutation keys provided for a request were
    // not well formed.
    INVALID_MUTATION = 4;

    // The schema provided for a request didn't match the actual
    // schema of the tablet.
    MISMATCHED_SCHEMA = 5;

    // The requested tablet_id is not currently hosted on this server.
    TABLET_NOT_FOUND = 6;

    // A request was made against a scanner ID that was either never
    // created or has expired.
    SCANNER_EXPIRED = 7;

    // An invalid scan was specified -- e.g the values passed for
    // predicates were incorrect sizes.
    INVALID_SCAN_SPEC = 8;

    // The provided configuration was not well-formed and/or
    // had a sequence number that was below the current config.
    INVALID_CONFIG = 9;

    // On a create tablet request, signals that the tablet already exists.
    TABLET_ALREADY_EXISTS = 10;

    // If the tablet has a newer schema than the requested one the "alter"
    // request will be rejected with this error.
    TABLET_HAS_A_NEWER_SCHEMA = 11;

    // The tablet is hosted on this server, but not in RUNNING state.
    TABLET_NOT_RUNNING = 12;

    // Client requested a snapshot read but the snapshot was invalid.
    INVALID_SNAPSHOT = 13;

    // An invalid scan call sequence ID was specified.
    INVALID_SCAN_CALL_SEQ_ID = 14;

    // This tserver is not the leader of the consensus configuration.
    NOT_THE_LEADER = 15;

    // The destination UUID in the request does not match this server.
    WRONG_SERVER_UUID = 16;

    // The compare-and-swap specified by an atomic RPC operation failed.
    CAS_FAILED = 17;

    // This server leader is not ready for the change configuration operation.
    LEADER_NOT_READY_CHANGE_CONFIG = 18;

    // This server leader is not ready to step down.
    LEADER_NOT_READY_TO_STEP_DOWN = 19;

    // Adding a peer which is already present in the current raft config.
    ADD_CHANGE_CONFIG_ALREADY_PRESENT = 20;

    // Removing a peer which is not present in the current raft config.
    REMOVE_CHANGE_CONFIG_NOT_PRESENT = 21;

    // Leader needs to be stepped down before calling change config. This happens
    // if the server we are trying to remove from the config is currently the leader.
    LEADER_NEEDS_STEP_DOWN = 22;

    // The operation is not supported.
    OPERATION_NOT_SUPPORTED = 23;

    // This tserver is the leader of the consensus configuration, but it's not ready to serve
    // requests. (That means in fact that the elected leader has not yet commited NoOp request.
    // The client must wait a bit for the end of this replica-operation.)
    LEADER_NOT_READY_TO_SERVE = 24;

    // This follower hasn't heard from the leader for a specified amount of time.
    STALE_FOLLOWER = 25;

    // The operation is already in progress. Used for remote bootstrap requests for now.
    ALREADY_IN_PROGRESS = 26;

    // Tablet server has some tablets pending local bootstraps.
    PENDING_LOCAL_BOOTSTRAPS = 27;
  }

  // The error code.
  required Code code = 1 [ default = UNKNOWN_ERROR ];

  // The Status object for the error. This will include a textual
  // message that may be more useful to present in log messages, etc,
  // though its error code is less specific.
  required AppStatusPB status = 2;
}

// A batched set of insert/mutate requests.
message WriteRequestPB {
  // TODO(proto3) reserved 2, 3;

  required bytes tablet_id = 1;

  // When replicating RocksDB write operations through Raft for single-shard transactions,
  // we put a write batch here.
  optional yb.docdb.KeyValueWriteBatchPB write_batch = 7;

  // A batch of redis operations.
  repeated RedisWriteRequestPB redis_write_batch = 8;

  // A batch of QL operations.
  repeated QLWriteRequestPB ql_write_batch = 10;

  // A batch of Pgsql operations (Although batching is not yet supported).
  repeated PgsqlWriteRequestPB pgsql_write_batch = 13;

  // Whether data blocks will be cached when read from the files or discarded after use.
  // Disable this to lower cache churn when doing large scans.
  optional bool cache_blocks = 9 [default = true];

  // A hybrid_time obtained by the client from a previous request.
  // TODO crypto sign this and propagate the signature along with
  // the hybrid_time.
  optional fixed64 propagated_hybrid_time = 5;

  optional bool include_trace = 6 [ default = false ];

  optional ReadHybridTimePB read_time = 12;

  // Use 2 int64 to represent UUID.
  optional fixed64 client_id1 = 14;
  optional fixed64 client_id2 = 15;
  optional int64 request_id = 16;
  optional int64 min_running_request_id = 17;
  optional double rejection_score = 18;

  optional fixed64 external_hybrid_time = 19;
}

message WriteResponsePB {
  // If the entire WriteResponsePB request failed, the error status that
  // caused the failure. This type of error is triggered for
  // cases such as the tablet not being on this server, or the
  // schema not matching. If any error specific to a given row
  // occurs, this error will be recorded in per_row_errors below,
  // even if all rows failed.
  optional TabletServerErrorPB error = 1;

  // If errors occurred with particular row operations, then the errors
  // for those operations will be passed back in 'per_row_errors'.
  message PerRowErrorPB {
    // The index of the row in the incoming batch.
    required int32 row_index = 1;
    // The error that occurred.
    required AppStatusPB error = 2;
  }
  repeated PerRowErrorPB per_row_errors = 2;

  // A batch of redis responses.
  repeated RedisResponsePB redis_response_batch = 8;

  // A batch of QL responses.
  repeated QLResponsePB ql_response_batch = 9;

  // A batch of QL responses.
  repeated PgsqlResponsePB pgsql_response_batch = 12;

  // The hybrid_time chosen by the server for this write.
  // TODO KUDU-611 propagate hybrid_times with server signature.
  optional fixed64 propagated_hybrid_time = 3;

  optional string trace_buffer = 10;

  // Used to report restart whether this operation requires read restart.
  optional ReadHybridTimePB restart_read_time = 11;

  // Used to report used read time when transaction asked for it.
  optional ReadHybridTimePB used_read_time = 13;
}

// A list tablets request
message ListTabletsRequestPB {
}

// A list tablets response
message ListTabletsResponsePB {
  optional TabletServerErrorPB error = 1;

  message StatusAndSchemaPB {
    required tablet.TabletStatusPB tablet_status = 1;
    required SchemaPB schema = 2;
    optional PartitionSchemaPB partition_schema = 3;
  }

  repeated StatusAndSchemaPB status_and_schema = 2;
}

message NoOpRequestPB {
  optional bytes tablet_id = 1;
}

message NoOpResponsePB {
  optional TabletServerErrorPB error = 1;
}

message ReadRequestPB {
  // The tablet to scan.
  optional bytes tablet_id = 1;

  repeated RedisReadRequestPB redis_batch = 2;

  repeated QLReadRequestPB ql_batch = 4;

  repeated PgsqlReadRequestPB pgsql_batch = 10;

  // Whether data blocks will be cached when read from the files or discarded after use.
  // Disable this to lower cache churn when doing large scans.
  optional bool cache_blocks = 3 [default = true];

  optional bool include_trace = 5 [ default = false ];

  optional YBConsistencyLevel consistency_level = 6 [ default = STRONG ];
  // TODO: add hybrid_time in future

  optional TransactionMetadataPB transaction = 7;

  optional fixed64 propagated_hybrid_time = 8;

  // See ReadHybridTime for explation of next two fields.
  optional ReadHybridTimePB read_time = 9;

  optional string proxy_uuid = 11;

  optional bool DEPRECATED_may_have_metadata = 12;

  optional double rejection_score = 13;
}

message ReadResponsePB {
  reserved 2;

  repeated RedisResponsePB redis_batch = 1;

  repeated QLResponsePB ql_batch = 4;

  repeated PgsqlResponsePB pgsql_batch = 8;

  optional TabletServerErrorPB error = 3;

  optional string trace_buffer = 5;

  optional fixed64 propagated_hybrid_time = 6;

  // Used to report restart whether this operation requires read restart.
  optional ReadHybridTimePB restart_read_time = 7;

  // Used to report used read time when transaction asked for it.
  optional ReadHybridTimePB used_read_time = 9;
}

message TransactionStatePB {
  optional bytes transaction_id = 1;
  optional TransactionStatus status = 2;

  // tablets has different meaning, depending on status:
  // COMMITTED - list of involved tablets
  // APPLYING - single entry, status tablet of this transaction
  // APPLIED - single entry, tablet that applied this transaction
  // Not used is other cases.
  repeated bytes tablets = 3;

  // Relevant only in APPLYING state.
  optional fixed64 commit_hybrid_time = 4;
}

// Truncate tablet request.
message TruncateRequestPB {
  optional bytes tablet_id = 1;
  optional fixed64 propagated_hybrid_time = 2;
}

// Truncate tablet response.
message TruncateResponsePB {
  optional TabletServerErrorPB error = 1;
  optional fixed64 propagated_hybrid_time = 2;
}

// Tablet's status request
message GetTabletStatusRequestPB {
  optional bytes tablet_id = 1;
}

// Tablet's status response
message GetTabletStatusResponsePB {
  optional TabletServerErrorPB error = 1;
  optional tablet.TabletStatusPB tablet_status = 2;
}

message GetMasterAddressesRequestPB {
}

message GetMasterAddressesResponsePB {
  optional TabletServerErrorPB error = 1;
  optional string master_addresses = 2;
}

message PublishRequestPB {
  required bytes channel = 1;
  required bytes message = 2;
}

message PublishResponsePB {
  required int32 num_clients_forwarded_to = 1;
}

// Get this tserver's notion of being ready for handling IO requests across all
// tablets that it owns.
message IsTabletServerReadyRequestPB {
}

// When response has no errors, the tserver is deemed ready as per its tablet manager layer
// when the number of not running tablets is 0. Or the client can choose to
// timeout before that. Also returns total tablets under this tablet server.
message IsTabletServerReadyResponsePB {
  optional TabletServerErrorPB error = 1;
  optional int32 num_tablets_not_running = 2;
  optional int32 total_tablets = 3 [default = 0];
}
