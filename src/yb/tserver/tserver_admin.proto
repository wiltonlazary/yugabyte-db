// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// The following only applies to changes made to this file as part of YugaByte development.
//
// Portions Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//
syntax = "proto2";

package yb.tserver;

option java_package = "org.yb.tserver";

import "yb/common/common.proto";
import "yb/consensus/metadata.proto";
import "yb/tablet/metadata.proto";
import "yb/tserver/tserver.proto";

message ChangeMetadataRequestPB {
  // UUID of server this request is addressed to.
  optional bytes dest_uuid = 5;

  required bytes tablet_id = 1;

  // TODO: Replace with the table descriptor
  // (Schema, Column IDs, Column Attributes)
  optional SchemaPB schema = 2;

  repeated IndexInfoPB indexes = 7;

  optional uint32 schema_version = 3;
  optional string new_table_name = 4;

  optional fixed64 propagated_hybrid_time = 6;

  optional tablet.TableInfoPB add_table = 8;

  optional uint32 wal_retention_secs = 9;
}

// This is used to export tablet metadata changes to a protobuf file to be reloaded on a new cluster
// startup to avoid running initdb.
message ExportedTabletMetadataChanges {
  repeated ChangeMetadataRequestPB metadata_changes = 1;
}

message ChangeMetadataResponsePB {
  optional TabletServerErrorPB error = 1;

  optional fixed64 propagated_hybrid_time = 2;
}

message CopartitionTableRequestPB {
  // UUID of server this request is addressed to.
  optional bytes dest_uuid = 1;
  optional bytes table_id = 2;
  optional bytes tablet_id = 3;
  optional string table_name = 4;
}

message CopartitionTableResponsePB {
  optional TabletServerErrorPB error = 1;
}

// A create tablet request.
message CreateTabletRequestPB {
  // UUID of server this request is addressed to.
  optional bytes dest_uuid = 8;

  required bytes table_id = 1;
  required bytes tablet_id = 2;
  // DEPRECATED.
  optional bytes start_key = 3;
  // DEPRECATED.
  optional bytes end_key = 4;
  // The partition of the tablet.
  optional PartitionPB partition = 9;

  required string table_name = 5;
  optional TableType table_type = 11;
  required SchemaPB schema = 6;
  // The partition schema of the table which the tablet belongs to.
  optional PartitionSchemaPB partition_schema = 10;

  // Initial consensus configuration for the tablet.
  required consensus.RaftConfigPB config = 7;

  // For index table: information about this index.
  optional IndexInfoPB index_info = 12;

  // True if the tablet is colocated.
  optional bool colocated = 13 [ default = false ];
}

message CreateTabletResponsePB {
  optional TabletServerErrorPB error = 1;
}

// A delete tablet request.
message DeleteTabletRequestPB {
  // UUID of server this request is addressed to.
  optional bytes dest_uuid = 4;

  required bytes tablet_id = 1;

  // Reason the tablet is being deleted (for logging purposes)
  optional string reason = 2;

  // Must be one of TABLET_DATA_DELETED (for table deletes) or
  // TABLET_DATA_TOMBSTONED (for replica retirement).
  optional tablet.TabletDataState delete_type = 3 [ default = TABLET_DATA_TOMBSTONED ];

  // The highest allowed OpId index of the latest known committed config.
  // This optional parameter is here to provide an atomic (compare-and-swap)
  // DeleteTablet operation. If this parameter is specified, the DeleteTablet()
  // operation will succeed only if the committed config has an opid_index that
  // is less than or equal to this value.
  // See also the definition of RaftConfigPB.
  // Note: At the time of this writing, there is a small race between checking
  // the value of the committed config opid index and shutting down the tablet
  // for deletion. See comments in ts_tablet_manager.cc
  optional int64 cas_config_opid_index_less_or_equal = 5;
}

message DeleteTabletResponsePB {
  optional TabletServerErrorPB error = 1;
}

// Enum of the server's Tablet Manager state: currently this is only
// used for assertions, but this can also be sent to the master.
enum TSTabletManagerStatePB {
  UNKNOWN = 999;

  // Indicates that Tablet Manager is initializing.
  MANAGER_INITIALIZING = 0;

  // Indicates that Tablet Manager is running and can create new
  // tablets.
  MANAGER_RUNNING = 1;

  // Indicates that tablet manager is shutting down and no new tablets
  // can be created.
  MANAGER_QUIESCING = 2;

  // Tablet Manager has shutdown.
  MANAGER_SHUTDOWN = 3;
}

// TODO: rename this to FlushOrCompactTabletsRequestPB
message FlushTabletsRequestPB {
  // UUID of server this request is addressed to.
  optional bytes dest_uuid = 1;

  // Tablets to flush.
  repeated bytes tablet_ids = 2;

  optional fixed64 propagated_hybrid_time = 3;

  // Whether we want to compact the tablets instead of flushing them.
  optional bool is_compaction = 4;
}

message FlushTabletsResponsePB {
  optional TabletServerErrorPB error = 1;

  optional bytes failed_tablet_id = 2;

  optional fixed64 propagated_hybrid_time = 3;
}

message CountIntentsRequestPB {
}

message CountIntentsResponsePB {
  optional TabletServerErrorPB error = 1;
  optional int64 num_intents = 2;
}

message AddTableToTabletRequestPB {
  required bytes tablet_id = 1;
  required tablet.TableInfoPB add_table = 2;
}

message AddTableToTabletResponsePB {
  optional TabletServerErrorPB error = 1;
  optional fixed64 propagated_hybrid_time = 2;
}

service TabletServerAdminService {
  // Create a new, empty tablet with the specified parameters. Only used for
  // brand-new tablets, not for "moves".
  rpc CreateTablet(CreateTabletRequestPB) returns (CreateTabletResponsePB);

  // Delete a tablet replica.
  rpc DeleteTablet(DeleteTabletRequestPB) returns (DeleteTabletResponsePB);

  // Alter a tablet's schema.
  rpc AlterSchema(ChangeMetadataRequestPB) returns (ChangeMetadataResponsePB);

  // Create a co-partitioned table in an existing tablet
  rpc CopartitionTable(CopartitionTableRequestPB) returns (CopartitionTableResponsePB);

  rpc FlushTablets(FlushTabletsRequestPB) returns (FlushTabletsResponsePB);

  rpc CountIntents(CountIntentsRequestPB) returns (CountIntentsResponsePB);

  rpc AddTableToTablet(AddTableToTabletRequestPB) returns (AddTableToTabletResponsePB);
}
